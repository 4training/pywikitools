# Internal configuration: Please make sure the following options are set correctly
# The [Paths] section contains general configuration, the other sections have
# all settings specific to that bot / script

# Path for executables and scripts. Folders are expected to have a / at the end
[Paths]
php = /usr/bin/php
base = /home/USERNAME/pywikitools/
worksheets = %(base)s/worksheets/
logs = %(base)s/logs/
temp = %(base)s/temp/
htmlexport = %(base)s/htmlexport/

[Dropbox]
# Dropbox configuration: OAuth access token and name of the main Dropbox folder we use
# see https://dropbox.tech/developers/generate-an-access-token-for-your-own-account
token = TODOLongOAuthToken
folder = /translatedfiles/

[translateodt]
# Which mediawiki environment do we read from? 4training or test (see family.py)
site = 4training
# Should the script close all openoffice windows after finishing?
closeoffice = True
# Do we need to add --headless to the soffice call?
headless = False

[correctbot]
# Which environment do we connect to? 4training or test (see family.py)
site = test
# We will make changes in the environment as the following user:
username = BotName

# Command to execute the mediawiki maintenance script runJobs.php to empty the job queue (needs also [Paths]/php)
# Comment this out if you don't want to run it (e.g. it can't be run because we're not on the server)
runjobs = /path/to/mediawiki/maintenance/runJobs.php

[generateodtbot]
# Which mediawiki environment do we read from? 4training or test (see family.py)
site = test
# We will login as the following user: (to send email notifications)
username = BotName
# Optionally: log to files (will be relative to path defined in [Paths:logs] )
logfile = generateodt.log
debuglogfile = generateodt_debug.log
# User name of admin to receive email notification with debug logs
admin = tadmin

[resourcesbot]
# Which environment do we connect to? 4training or test (see family.py)
site = test
# We will make changes in the environment as the following user:
username = BotName
# password is needed to mark updated language information pages for translation
password = MySecretPassword

# resourcesbot writes language reports to [Paths:languagereports]
# Optionally: log to files (will be relative to path defined in [Paths:logs] )
# Three different verbosity levels (warning, info, debug)
logfile = resourcesbot.log
infologfile = resourcesbot_info.log
debuglogfile = resourcesbot_debug.log

[mediawiki2drupal]
# Which mediawiki environment do we read from? See family.py
site = 4training
# Configuration to write to the Drupal system using its JSON:API
endpoint = https://www.example.com/jsonapi/node/page
username = DrupalUserName
password = MySecretPassword

[autotranslate]
# Which environment do we connect to (see family.py)? Don't use 4training
# as we don't want unchecked automatic translations on the live site
site = test
# We will make changes in the environment as the following user:
username = BotName

# DeepL configuration
deeplendpoint = https://api-free.deepl.com/v2/translate
deeplapikey = MySecretDeepLAPIKey
